
******************Selecting Columns*****************
****************************************************

# this select a column in dataset
SELECT name FROM people;

# this print the string 'something'
SELECT 'something'
AS RESULT;

# select two columns at a time
SELECT name, birthday FROM people;

# select all with *
SELECT * FROM people;

# limit the number
SELECT * FROM people LIMIT 10;

# select distinct and ignore duplicates
SELECT DISTINCT language FROM films;

# count the number of rows
SELECT COUNT(*) FROM people;

# count the non-missing values
SELECT COUNT(birthdate) FROM people

# count the distinct
SELECT COUNT(DISTINCT birthdate) FROM people




********************Filtering Rows************************
**********************************************************

# <> means not equal
 
# filtering text results with WHERE (WHERE always comes after FROM)
SELECT title FROM films WHERE title = 'Metropolis' ;

# filtering numerical results with WHERE
SELECT title, release_year FROM films WHERE release_year > 2000

# Use WHERE AND
SELECT title FROM films WHERE release_year > 1994 AND release_year < 2000

# Use WHERE OR
SELECT title FROM films 
WHERE (release_year = 1994 or release_year = 1995) 
AND (certification = 'PG' or certification = 'R');

# BETWEEN is inclusive and is for 
# numercal and text values in specific range
SELECT name FROM kids WHERE age BETWEEN 2 AND 12
AND nationality = 'USA';

# WHERE IN 
SELECT name FROM kids WHERE age IN (2,4,6,8,10);

# IS NULL
SELECT name FROM people WHERE deathdate IS NULL;

# LIKE and NOT LIKE, With % or _
SELECT name FROM people WHERE name LIKE 'B%';



*********************Aggregate Functions**********************
**************************************************************

# Aggregate functions like AVG(), SUM(), MAX(), MIN()
SELECT AVG(budget) FROM films;

# Aggregate functions with WHERE filtering
SELECT SUM(budget) FROM films WHERE release_year >= 2010;

# Basic arithmatic, notice decimal results
# Returns 1 since 4 and 3 are integers
SELECT (4/3) 

# Returns decimal places
SELECT (4.0/3.0) AS RESULT;

# Aliasing
SELECT MAX(budget) AS max_budget,MAX(duration) AS max_duration FROM films;




**************************Sorting and Grouping*******************************
*****************************************************************************

# ORDER BY, pressume ascending 
SELECT title FROM films ORDER BY release_year DESC;

# Sort by multiple columns 
SELECT birthday, name FROM people ORDER BY birthdate, name;

# GROUP BY with COUNT() or MAX()
# GROUP BY always comes after FROM
# ORDER BY always comes after GROUP BY

SELECT release_year, COUNT(*) FROM films GROUP BY release_year;
SELECT country, release_year, MIN(gross) FROM films GROUP BY release_year, country ORDER BY country, release_year;

# One should not use WHERE with Aggregate Functions, use HAVING instead

# Task
# Now you're going to write a query that returns the average budget and average gross earnings for films in each year after 1990, 
# if the average budget is greater than $60 million. Finally, modify your query to order the results from highest average gross earnings to lowest.

SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000
ORDER BY AVG(gross) DESC;













